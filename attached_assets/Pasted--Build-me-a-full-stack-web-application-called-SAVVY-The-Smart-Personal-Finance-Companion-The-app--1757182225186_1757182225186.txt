"Build me a full-stack web application called SAVVY – The Smart Personal Finance Companion. The app should:

🔹 Core Features

User Authentication

Signup/Login using JWT authentication.

Store hashed passwords with BCrypt.

Each user should have a secure, isolated account.

Income & Expense Management

Users can manually add income and expense records.

Option to categorize transactions (Food, Travel, Entertainment, Bills, Savings, etc.).

Store data in PostgreSQL.

Budget Monitoring

Allow users to set monthly category-wise budgets.

A rule-based engine should check spending patterns against thresholds.

Real-Time Alerts & Notifications

Trigger in-app alerts and email notifications when a user is close to crossing a budget limit.

Example: “⚠️ You’ve spent 80% of your Food budget this month.”

Dashboards & Visualizations

Build a dashboard using ReactJS + Chart.js.

Show pie charts of category-wise spending, line charts for monthly expenses, and progress bars for savings goals.

Personalized Recommendations

Suggest cost-saving tips (e.g., “You’re spending ₹500/month on unused subscriptions — consider canceling.”).

Nudge users to adjust savings goals if income/expenses change.

🔹 Tech Stack

Frontend: ReactJS, TailwindCSS, Chart.js

Backend: Node.js with Express

Database: PostgreSQL

Security: JWT (for auth), BCrypt (for hashing), AES encryption for sensitive fields

Notifications: Nodemailer (for email alerts)

🔹 Project Flow

User signs up → logs in.

Adds income, expenses, and goals.

Data stored securely in PostgreSQL.

Rule-based engine checks data → generates alerts & suggestions.

Dashboard updates in real-time with visual charts.

🔹 Additional Goals (Future Scope)

Add AI-based chatbot for financial queries.

Integrate with UPI or banking APIs for auto transaction sync.

Add support for crypto portfolio tracking.

Enable family/group budgeting.

⚡ Final Task for the AI/Coding Tool:
“Generate the boilerplate code and folder structure for this full-stack app with ReactJS frontend and Node.js + Express backend, connected to PostgreSQL. Include authentication, CRUD APIs for transactions, a rule-based budget alert system, and a sample dashboard with charts.”